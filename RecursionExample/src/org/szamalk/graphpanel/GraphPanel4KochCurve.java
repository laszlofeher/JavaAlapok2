/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.szamalk.graphpanel;

import java.awt.Graphics;
import org.szamalk.turtle.Turtle;

/**
 *
 * @author Lenovo
 */
public class GraphPanel4KochCurve extends javax.swing.JPanel {
    private double dLong;
    private int countOfRecursion;
    private int startX, startY;
    private int type = 1;
    /**
     * Creates new form GraphPanel
     */
    public GraphPanel4KochCurve() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 731, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        Turtle t = new Turtle(g, this.startX, this.startY);
        if(this.type == 1){
        curve(g, t, this.dLong, this.countOfRecursion);
        }else if(this.type== 2){
            curve(g, t, this.dLong, this.countOfRecursion);
            t.rt(120);
            curve(g, t, this.dLong, this.countOfRecursion);
            t.rt(120);
            curve(g, t, this.dLong, this.countOfRecursion);
        }
        
    }

    public double getdLong() {
        return dLong;
    }

    public void setdLong(double dLong) {
        this.dLong = dLong;
    }

    public int getCountOfRecursion() {
        return countOfRecursion;
    }

    public void setCountOfRecursion(int countOfRecursion) {
        this.countOfRecursion = countOfRecursion;
    }
    
    public void setStartXY(int x, int y){
        this.startX = x;
        this.startY = y/2;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }
    
    
    public void curve(Graphics g, Turtle t, double l, int r) {
        if (r > 0) {

            curve(g, t, l / 3, r - 1);
            t.lt(60);
            curve(g, t, l / 3, r - 1);
            t.rt(120);
            curve(g, t, l / 3, r - 1);
            t.lt(60);
            curve(g, t, l / 3, r - 1);

        } else {
            
            t.fd(g, l);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
